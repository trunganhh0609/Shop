<?xml version = "1.0" encoding = "UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.qlrl.repository.ProductRepository">

    <select id="getLstPromotionProduct" resultType="map">
        SELECT
        product.PRODUCT_ID,
        product.IMAGE,
        product.PRODUCT_NAME,
        product.PRICE,
        product.DESCRIPTION,
        promotion.PROMOTION_NAME,
        promotion.VALUE,
        promotion.START_DATE,
        promotion.END_DATE
        FROM product
        INNER JOIN promotion ON product.PROMOTION_ID = promotion.PROMOTION_ID
        WHERE NOW() >= promotion.START_DATE
        AND promotion.END_DATE >= NOW()
        LIMIT 8
    </select>

    <select id="getNewProduct" resultType="map">
        SELECT
        product.PRODUCT_ID,
        product.PRODUCT_NAME,
        product.IMAGE,
        product.PRICE,
        product.DESCRIPTION,
        promotion.PROMOTION_NAME,
        promotion.VALUE,
        promotion.START_DATE,
        promotion.END_DATE
        FROM product
        LEFT JOIN promotion
        ON product.PROMOTION_ID = promotion.PROMOTION_ID
        order BY product.PRODUCT_ID DESC LIMIT 8
    </select>
    <select id="search" resultType="map" parameterType="map">
        SELECT
        product.PRODUCT_ID,
        product.PRODUCT_NAME,
        product.PRICE,
        product.IMAGE,
        product.DESCRIPTION,
        promotion.PROMOTION_NAME,
        promotion.VALUE,
        promotion.START_DATE,
        promotion.END_DATE
        FROM product
        LEFT JOIN promotion
        ON product.PROMOTION_ID = promotion.PROMOTION_ID
        WHERE product.PRODUCT_NAME LIKE CONCAT('%',#{keySearch},'%')
    </select>
    <select id="getProductById" parameterType="map" resultType="map">
        SELECT
        product.PRODUCT_ID,
        product.PRODUCT_NAME,
        product.IMAGE,
        product.CATEGORY_ID,
        product.PRICE,
        product.DESCRIPTION,
        promotion.PROMOTION_ID,
        promotion.PROMOTION_NAME,
        promotion.VALUE,
        promotion.START_DATE,
        promotion.END_DATE,
        category.CATEGORY_NAME
        FROM product
        INNER JOIN category ON category.CATEGORY_ID = product.CATEGORY_ID
        LEFT JOIN promotion
        ON product.PROMOTION_ID = promotion.PROMOTION_ID
        WHERE product.PRODUCT_ID = #{id}
    </select>

    <select id="getRelatedProduct" parameterType="map" resultType="map">
        SELECT
        product.PRODUCT_ID,
        product.PRODUCT_NAME,
        product.PRICE,
        product.IMAGE,
        promotion.PROMOTION_NAME,
        product.DESCRIPTION,
        promotion.VALUE,
        promotion.START_DATE,
        promotion.END_DATE
        FROM product
        LEFT JOIN promotion ON product.PROMOTION_ID = promotion.PROMOTION_ID
        AND product.CATEGORY_ID = #{idCategory}
        LIMIT 8
    </select>

    <select id="getCartByUserName" parameterType="map" resultType="map">
        SELECT CART_ID FROM shopping_cart INNER JOIN user
        ON shopping_cart.USER_ID = user.USER_ID WHERE user.USER_NAME = #{userId}
    </select>

    <select id="checkProductExitsInCart" parameterType="map" resultType="Integer">
        SELECT cart_detail.QUANTITY FROM cart_detail
        WHERE cart_detail.CART_ID = #{cartId}
        AND cart_detail.PRODUCT_ID = #{productId}
    </select>

    <select id="getShoppingCart" parameterType="map" resultType="map">
        SELECT
        cart_detail.CART_DETAIL_ID,
        cart_detail.PRODUCT_ID,
        cart_detail.PRODUCT_ID,
        cart_detail.QUANTITY,
        product.PRODUCT_NAME,
        product.PRICE,
        product.IMAGE,
        promotion.VALUE,
        promotion.START_DATE,
        promotion.END_DATE
        FROM cart_detail
        INNER JOIN product ON cart_detail.PRODUCT_ID = product.PRODUCT_ID
        LEFT JOIN promotion ON promotion.PROMOTION_ID = product.PROMOTION_ID
        WHERE cart_detail.CART_ID = #{cartId}
    </select>

    <update id="updateCartDetail" parameterType="map">
        UPDATE cart_detail SET QUANTITY= #{quantity}
        WHERE
        CART_ID = #{cartId}
        AND
        cart_detail.PRODUCT_ID = #{productId};
    </update>

    <insert id="addToCart" parameterType="map">
        INSERT INTO cart_detail
        (CART_ID, PRODUCT_ID, QUANTITY) VALUES (#{cartId}, #{productId}, #{quantity});
    </insert>

    <delete id="deleteProductInCart" parameterType="map">
        DELETE FROM cart_detail WHERE
        CART_ID = #{cartId}
        AND
        cart_detail.PRODUCT_ID = #{productId};
    </delete>

    <insert id="saveOrder" parameterType="com.project.qlrl.models.Order" useGeneratedKeys="true" keyProperty="orderId" keyColumn="ORDER_ID">
        INSERT INTO my_pham_shop.order
        (USER_ID,
        ADDRESS,
        NOTE,
        ORDER_DATE,
        RECEIVER_NAME,
        RECEIVER_PHONE,
        TOTAL,
        STATUS)
        VALUES
        (#{userId},
        #{address},
        #{note},
        NOW(),
        #{receiverName},
        #{receiverPhone},
        #{total},
        0);
    </insert>

    <insert id="addProductToOrder" parameterType="map">
        INSERT INTO my_pham_shop.product_oder
        (PRODUCT_ID, QUANTITY, ORDER_ID) VALUES (#{PRODUCT_ID}, #{QUANTITY}, #{orderId});
    </insert>

    <delete id="deleteCartDetail" parameterType="map">
        DELETE FROM my_pham_shop.cart_detail WHERE  CART_DETAIL_ID = #{CART_DETAIL_ID}
    </delete>

    <select id="getProductByCategory" parameterType="map" resultType="map">
        SELECT
        product.PRODUCT_ID,
        product.PRODUCT_NAME,
        product.PRICE,
        product.IMAGE,
        product.DESCRIPTION,
        promotion.PROMOTION_NAME,
        promotion.VALUE,
        promotion.START_DATE,
        promotion.END_DATE
        FROM product
        LEFT JOIN promotion
        ON product.PROMOTION_ID = promotion.PROMOTION_ID
        WHERE product.CATEGORY_ID = #{id}
        <if test="maxPrice != ''">
            AND #{maxPrice} > product.PRICE
        </if>
        order BY product.PRICE
    </select>

    <select id="getPromotionCategory" parameterType="map" resultType="map">
        SELECT
        product.PRODUCT_ID,
        product.PRODUCT_NAME,
        product.PRICE,
        product.DESCRIPTION,
        product.IMAGE,
        promotion.PROMOTION_NAME,
        promotion.VALUE,
        promotion.START_DATE,
        promotion.END_DATE
        FROM product
        INNER JOIN promotion
        ON product.PROMOTION_ID = promotion.PROMOTION_ID
        <if test="maxPrice != ''">
            WHERE #{maxPrice} > (product.PRICE * (100 - promotion.VALUE) / 100)
        </if>
        order BY product.PRICE
    </select>

    <insert id="addProduct" parameterType="com.project.qlrl.models.Product" useGeneratedKeys="true" keyProperty="productId" keyColumn="PRODUCT_ID">
        INSERT INTO product
        (PRODUCT_NAME,
        CATEGORY_ID,
        PRICE,
        IMAGE,
        DESCRIPTION
        <if test="promotionId != ''">
            ,PROMOTION_ID
        </if>

        )
        VALUES (
        #{productName},
        #{categoryId},
        #{price},
        #{image},
        #{description}
        <if test="promotionId != ''">
            , #{promotionId}
        </if>

        );
    </insert>

    <select id="getAllCategory" resultType="map">
        SELECT * FROM category
    </select>

    <select id="getPromotionInThisTime" resultType="map">
        SELECT * FROM promotion WHERE NOW() >= promotion.START_DATE AND promotion.END_DATE >= NOW()
    </select>

    <select id="getPromotion" resultType="map">
        SELECT * FROM promotion
    </select>

    <insert id="addProductToWareHouse" parameterType="map" >
        INSERT INTO ware_house
        (PRODUCT_ID,
        QUANTITY)
        VALUES (
        #{productId},
        #{quantity} )
    </insert>

    <select id="getProductMng" resultType="map">
        SELECT
        product.PRODUCT_ID,
        product.PRODUCT_NAME,
        product.PRICE,
        product.IMAGE,
        product.DESCRIPTION,
        product.PROMOTION_ID,
        product.CATEGORY_ID,
        category.CATEGORY_NAME,
        ware_house.QUANTITY
        FROM product
        INNER JOIN ware_house ON product.PRODUCT_ID = ware_house.PRODUCT_ID
        INNER JOIN category ON product.CATEGORY_ID = category.CATEGORY_ID
        order BY product.PRODUCT_ID
    </select>

    <update id="editProduct" parameterType="map">
        UPDATE product SET
        <if test="productName != null and productName != ''">
            PRODUCT_NAME = #{productName}
        </if>
        <if test="categoryId != null and categoryId != ''">
            ,CATEGORY_ID = #{categoryId}
        </if>
        <if test="price != null and price != ''">
            ,PRICE = #{price}
        </if>
        <if test="image != null and image != ''">
            ,IMAGE = #{image}
        </if>
        <if test="description != null and description != ''">
            ,DESCRIPTION = #{description}
        </if>
        <if test="promotionId != null and promotionId != ''">
            ,PROMOTION_ID = #{promotionId}
        </if>
        WHERE  PRODUCT_ID = #{productId};
    </update>

    <update id="updateWareHouse" parameterType="map">
        UPDATE ware_house SET QUANTITY = #{quantity},
        UPDATED_DATE = NOW()
        WHERE PRODUCT_ID = #{productId}
    </update>

    <delete id="deleteProduct" parameterType="map">
        DELETE FROM product WHERE PRODUCT_ID = #{productId}
    </delete>

    <delete id="deleteProductInWareHouse" parameterType="map">
        DELETE FROM ware_house WHERE PRODUCT_ID = #{productId}
    </delete>

    <select id="getMyOrder" parameterType="map" resultType="map">
        SELECT
        `order`.ORDER_ID,
        `order`.USER_ID,
        `order`.ADDRESS,
        `order`.ORDER_DATE,
        `order`.RECEIVER_NAME,
        `order`.RECEIVER_PHONE,
        `order`.STATUS
        FROM `order`
        INNER JOIN user ON user.USER_ID = `order`.USER_ID
        WHERE user.USER_NAME = #{userName}
    </select>

    <select id="getAllOrder" resultType="map">
        SELECT * FROM `order`
    </select>
</mapper>